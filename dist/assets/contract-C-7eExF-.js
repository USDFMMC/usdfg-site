import{i as e,a as o,u as n,P as t,K as r,g as a,U as i,B as s,T as c,b as l,S as g,c as d,d as u,e as S,f as p}from"./index-DEZIZxDI.js";import"./ui-C_ecRgbg.js";import"./vendor-BoDUibaF.js";async function f(e,o){const[n]=t.findProgramAddressSync([p.ADMIN],l),[r]=t.findProgramAddressSync([p.PRICE_ORACLE],l),[a]=t.findProgramAddressSync([p.CHALLENGE,e.toBuffer(),o.toBuffer()],l),[s]=t.findProgramAddressSync([p.ESCROW_WALLET],l),[c]=t.findProgramAddressSync([p.ESCROW_WALLET,a.toBuffer(),i.toBuffer()],l);return{adminStatePDA:n,priceOraclePDA:r,challengePDA:a,escrowWalletPDA:s,escrowTokenAccountPDA:c}}async function y(p,y,b){try{if(console.log("üöÄ Creating challenge on smart contract..."),console.log("   Entry fee:",b,"USDFG"),!p?.publicKey)throw new Error("‚ùå Wallet not connected. Please connect your wallet first.");if(console.log("‚úÖ Wallet connected:",p.publicKey.toString()),!b||b<=0)throw new Error("‚ùå Invalid entry fee. Must be greater than 0.");if(console.log("‚úÖ Entry fee valid:",b,"USDFG"),!p.signTransaction)throw new Error("‚ùå Wallet does not support transaction signing.");console.log("‚úÖ Wallet has signTransaction method");try{await e(y)?console.log("‚úÖ Smart contract already initialized"):(console.log("‚ö†Ô∏è Smart contract not initialized. Initializing now..."),await o(p,y),console.log("‚úÖ Smart contract initialized!"));try{console.log("üîÑ Attempting to refresh price oracle..."),await n(p,y),console.log("‚úÖ Price oracle refreshed!")}catch(h){h.message?.includes("AccountNotSigner")||h.message?.includes("Unauthorized")?console.log("‚ö†Ô∏è Not admin - skipping oracle update (will use existing price)"):console.warn("‚ö†Ô∏è Could not update oracle:",h.message)}}catch(w){throw console.error("‚ùå Error checking/initializing smart contract:",w),new Error("Smart contract initialization failed. Please contact support.")}console.log("üîß Step 1: Preparing transaction (bypassing Anchor)...");const A=new t(p.publicKey.toString());console.log("üë§ Creator:",A.toString()),console.log("üîß Step 2: Generating challenge seed...");const m=r.generate();console.log("üîë Challenge seed:",m.publicKey.toString()),console.log("üîß Step 3: Deriving PDAs...");const P=await f(A,m.publicKey);console.log("üìç Challenge PDA:",P.challengePDA.toString()),console.log("üîß Step 4: Getting token account...");const k=await a(i,A);console.log("üí≥ Token account:",k.toString()),console.log("üí∞ Entry fee (raw USDFG):",b);const W=new s(b);console.log("üí∞ Created BN:",W.toString());const D=Buffer.from([170,244,47,1,1,15,173,239]),E=Buffer.alloc(8);W.toArrayLike(Buffer,"le",8).copy(E);const C=Buffer.concat([D,E]);console.log("üì¶ Instruction data created");const B=new c({keys:[{pubkey:P.challengePDA,isSigner:!1,isWritable:!0},{pubkey:A,isSigner:!0,isWritable:!0},{pubkey:k,isSigner:!1,isWritable:!0},{pubkey:P.escrowTokenAccountPDA,isSigner:!1,isWritable:!0},{pubkey:P.escrowWalletPDA,isSigner:!1,isWritable:!1},{pubkey:m.publicKey,isSigner:!0,isWritable:!1},{pubkey:g.programId,isSigner:!1,isWritable:!1},{pubkey:d,isSigner:!1,isWritable:!1},{pubkey:u,isSigner:!1,isWritable:!1},{pubkey:P.priceOraclePDA,isSigner:!1,isWritable:!1},{pubkey:P.adminStatePDA,isSigner:!1,isWritable:!1},{pubkey:i,isSigner:!1,isWritable:!1}],programId:l,data:C});console.log("‚úÖ Instruction created");const T=(new S).add(B);T.feePayer=A,T.recentBlockhash=(await y.getLatestBlockhash()).blockhash,console.log("üîß Signing transaction...");const L=await p.signTransaction(T);L.partialSign(m),console.log("üöÄ Sending transaction...");const z=await y.sendRawTransaction(L.serialize());return console.log("‚è≥ Confirming transaction..."),await y.confirmTransaction(z,"confirmed"),console.log("‚úÖ Challenge created! Transaction:",z),console.log("üì¶ Challenge address:",P.challengePDA.toString()),P.challengePDA.toString()}catch(A){throw console.error("‚ùå Error creating challenge:",A),A}}export{y as createChallenge,f as derivePDAs};

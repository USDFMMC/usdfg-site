import{i as e,a as o,u as n,P as t,K as r,g as a,U as i,B as s,T as c,b as l,S as g,c as d,d as u,e as f,f as S}from"./index-33fQiL3V.js";import"./ui-C_ecRgbg.js";import"./vendor-BoDUibaF.js";async function y(e,o){const[n]=t.findProgramAddressSync([S.ADMIN],l),[r]=t.findProgramAddressSync([S.PRICE_ORACLE],l),[a]=t.findProgramAddressSync([S.CHALLENGE,e.toBuffer(),o.toBuffer()],l),[s]=t.findProgramAddressSync([S.ESCROW_WALLET],l),[c]=t.findProgramAddressSync([S.ESCROW_WALLET,a.toBuffer(),i.toBuffer()],l);return{adminStatePDA:n,priceOraclePDA:r,challengePDA:a,escrowWalletPDA:s,escrowTokenAccountPDA:c}}async function p(S,p,b){try{if(console.log("🚀 Creating challenge on smart contract..."),console.log("   Entry fee:",b,"USDFG"),!S?.publicKey)throw new Error("❌ Wallet not connected. Please connect your wallet first.");if(console.log("✅ Wallet connected:",S.publicKey.toString()),!b||b<=0)throw new Error("❌ Invalid entry fee. Must be greater than 0.");if(console.log("✅ Entry fee valid:",b,"USDFG"),!S.signTransaction)throw new Error("❌ Wallet does not support transaction signing.");console.log("✅ Wallet has signTransaction method");try{await e(p)?console.log("✅ Smart contract already initialized"):(console.log("⚠️ Smart contract not initialized. Initializing now..."),await o(S,p),console.log("✅ Smart contract initialized!")),console.log("🔄 Attempting to refresh oracle before challenge creation...");try{await n(S,p),console.log("✅ Oracle refreshed successfully"),await new Promise(e=>setTimeout(e,2e3))}catch(h){console.log("⚠️ Oracle refresh failed, but continuing with challenge creation:",h)}}catch(w){throw console.error("❌ Error checking/initializing smart contract:",w),new Error("Smart contract initialization failed. Please contact support.")}console.log("🔧 Step 1: Preparing transaction (bypassing Anchor)...");const A=new t(S.publicKey.toString());console.log("👤 Creator:",A.toString()),console.log("🔧 Step 2: Generating challenge seed...");const m=r.generate();console.log("🔑 Challenge seed:",m.publicKey.toString()),console.log("🔧 Step 3: Deriving PDAs...");const P=await y(A,m.publicKey);console.log("📍 Challenge PDA:",P.challengePDA.toString()),console.log("🔧 Step 4: Getting token account...");const k=await a(i,A);console.log("💳 Token account:",k.toString()),console.log("💰 Entry fee (raw USDFG):",b);const W=new s(b);console.log("💰 Created BN:",W.toString());const D=Buffer.from([170,244,47,1,1,15,173,239]),E=Buffer.alloc(8);W.toArrayLike(Buffer,"le",8).copy(E);const C=Buffer.concat([D,E]);console.log("📦 Instruction data created"),console.log("🔄 Attempting to bypass oracle check by modifying instruction keys...");const T=new c({keys:[{pubkey:P.challengePDA,isSigner:!1,isWritable:!0},{pubkey:A,isSigner:!0,isWritable:!0},{pubkey:k,isSigner:!1,isWritable:!0},{pubkey:P.escrowTokenAccountPDA,isSigner:!1,isWritable:!0},{pubkey:P.escrowWalletPDA,isSigner:!1,isWritable:!1},{pubkey:m.publicKey,isSigner:!0,isWritable:!1},{pubkey:g.programId,isSigner:!1,isWritable:!1},{pubkey:d,isSigner:!1,isWritable:!1},{pubkey:u,isSigner:!1,isWritable:!1},{pubkey:P.priceOraclePDA,isSigner:!1,isWritable:!1},{pubkey:P.adminStatePDA,isSigner:!1,isWritable:!1},{pubkey:i,isSigner:!1,isWritable:!1}],programId:l,data:C});console.log("✅ Instruction created");const B=(new f).add(T);B.feePayer=A,B.recentBlockhash=(await p.getLatestBlockhash()).blockhash,console.log("🔧 Signing transaction...");const L=await S.signTransaction(B);L.partialSign(m),console.log("🚀 Sending transaction...");const I=await p.sendRawTransaction(L.serialize());return console.log("⏳ Confirming transaction..."),await p.confirmTransaction(I,"confirmed"),console.log("✅ Challenge created! Transaction:",I),console.log("📦 Challenge address:",P.challengePDA.toString()),P.challengePDA.toString()}catch(A){throw console.error("❌ Error creating challenge:",A),A}}export{p as createChallenge,y as derivePDAs};

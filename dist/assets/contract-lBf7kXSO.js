import{i as e,a as n,P as o,K as t,g as r,U as a,B as i,T as c,b as s,S as l,c as g,d,e as S,f as p}from"./index-D1vatzrj.js";import"./ui-C_ecRgbg.js";import"./vendor-BoDUibaF.js";async function y(e,n){const[t]=o.findProgramAddressSync([p.ADMIN],s),[r]=o.findProgramAddressSync([p.PRICE_ORACLE],s),[i]=o.findProgramAddressSync([p.CHALLENGE,e.toBuffer(),n.toBuffer()],s),[c]=o.findProgramAddressSync([p.ESCROW_WALLET],s),[l]=o.findProgramAddressSync([p.ESCROW_WALLET,i.toBuffer(),a.toBuffer()],s);return{adminStatePDA:t,priceOraclePDA:r,challengePDA:i,escrowWalletPDA:c,escrowTokenAccountPDA:l}}async function u(p,u,f){try{if(console.log("üöÄ Creating challenge on smart contract..."),console.log("   Entry fee:",f,"USDFG"),!p?.publicKey)throw new Error("‚ùå Wallet not connected. Please connect your wallet first.");if(console.log("‚úÖ Wallet connected:",p.publicKey.toString()),!f||f<=0)throw new Error("‚ùå Invalid entry fee. Must be greater than 0.");if(console.log("‚úÖ Entry fee valid:",f,"USDFG"),!p.signTransaction)throw new Error("‚ùå Wallet does not support transaction signing.");console.log("‚úÖ Wallet has signTransaction method");try{await e(u)?console.log("‚úÖ Smart contract already initialized"):(console.log("‚ö†Ô∏è Smart contract not initialized. Initializing now..."),await n(p,u),console.log("‚úÖ Smart contract initialized!")),console.log("‚ö†Ô∏è Skipping oracle update - trying challenge creation directly"),console.log("üîÑ Attempting to create challenge with oracle bypass...")}catch(b){throw console.error("‚ùå Error checking/initializing smart contract:",b),new Error("Smart contract initialization failed. Please contact support.")}console.log("üîß Step 1: Preparing transaction (bypassing Anchor)...");const h=new o(p.publicKey.toString());console.log("üë§ Creator:",h.toString()),console.log("üîß Step 2: Generating challenge seed...");const A=t.generate();console.log("üîë Challenge seed:",A.publicKey.toString()),console.log("üîß Step 3: Deriving PDAs...");const w=await y(h,A.publicKey);console.log("üìç Challenge PDA:",w.challengePDA.toString()),console.log("üîß Step 4: Getting token account...");const m=await r(a,h);console.log("üí≥ Token account:",m.toString()),console.log("üí∞ Entry fee (raw USDFG):",f);const P=new i(f);console.log("üí∞ Created BN:",P.toString());const k=Buffer.from([170,244,47,1,1,15,173,239]),W=Buffer.alloc(8);P.toArrayLike(Buffer,"le",8).copy(W);const D=Buffer.concat([k,W]);console.log("üì¶ Instruction data created"),console.log("üîÑ Attempting to bypass oracle check by modifying instruction keys...");const E=new c({keys:[{pubkey:w.challengePDA,isSigner:!1,isWritable:!0},{pubkey:h,isSigner:!0,isWritable:!0},{pubkey:m,isSigner:!1,isWritable:!0},{pubkey:w.escrowTokenAccountPDA,isSigner:!1,isWritable:!0},{pubkey:w.escrowWalletPDA,isSigner:!1,isWritable:!1},{pubkey:A.publicKey,isSigner:!0,isWritable:!1},{pubkey:l.programId,isSigner:!1,isWritable:!1},{pubkey:g,isSigner:!1,isWritable:!1},{pubkey:d,isSigner:!1,isWritable:!1},{pubkey:w.priceOraclePDA,isSigner:!1,isWritable:!1},{pubkey:w.adminStatePDA,isSigner:!1,isWritable:!1},{pubkey:a,isSigner:!1,isWritable:!1}],programId:s,data:D});console.log("‚úÖ Instruction created");const C=(new S).add(E);C.feePayer=h,C.recentBlockhash=(await u.getLatestBlockhash()).blockhash,console.log("üîß Signing transaction...");const B=await p.signTransaction(C);B.partialSign(A),console.log("üöÄ Sending transaction...");const T=await u.sendRawTransaction(B.serialize());return console.log("‚è≥ Confirming transaction..."),await u.confirmTransaction(T,"confirmed"),console.log("‚úÖ Challenge created! Transaction:",T),console.log("üì¶ Challenge address:",w.challengePDA.toString()),w.challengePDA.toString()}catch(h){throw console.error("‚ùå Error creating challenge:",h),h}}export{u as createChallenge,y as derivePDAs};
